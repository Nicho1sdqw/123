import numpy as np
import json
import os

file_num = 1
# 输入所有得到的圆心和半径 -> 需要按照一下格式
# b = [5.383411e+02,1.792890e+02,2.509141e+01,
# 7.591086e+02,1.872154e+02,2.286318e+01,
# 8.532828e+01,6.909939e+02,2.080884e+01,
# 9.561575e+01,1.625555e+02,2.518558e+01,
# 3.197800e+02,1.725812e+02,2.569024e+01,
# 9.772681e+02,1.971315e+02,2.464405e+01,
# 1.195625e+03,2.042428e+02,2.412785e+01]


# b = [928 , 266 , 37 ,
# 272 , 266 , 38 ,
# 306 , 766 , 37 ,
# 904 , 746 , 49 ,
# 896 , 752 , 25 ,
# 282 , 264 , 32 ,
# 278 , 274 , 32 ,
# 900 , 734 , 39 ,
# 896 , 766 , 41 ,
# 912 , 754 , 39 ,
# 890 , 736 , 39 ,
# 274 , 256 , 29 ,
# 908 , 764 , 40 ,
# 106 , 504 , 24 ,
# 72 , 544 , 40 ,
# 68 , 452 , 45 ,
# 104 , 490 , 25 ,
# 68 , 496 , 45 ,
# 266 , 276 , 38 ,
# 108 , 444 , 22 ,
# 78 , 464 , 34 ,
# 64 , 586 , 49 ,
# 910 , 736 , 37 ,
# 70 , 484 , 43 ,
# 1122 , 538 , 43 ,
# 106 , 528 , 24 ,
# 68 , 520 , 45 ,
# 926 , 754 , 29 ,
# 1106 , 432 , 27 ,
# 108 , 538 , 24 ,
# 110 , 566 , 20 ,
# 62 , 416 , 49 ,
# 886 , 762 , 39 ,
# 1116 , 504 , 38 ,
# 1128 , 508 , 49 ,
# 70 , 576 , 43 ,
# 1114 , 750 , 38 ,
# 106 , 472 , 23 ,
# 108 , 390 , 21 ,
# 1096 , 464 , 18 ,
# 1122 , 718 , 45 ,
# 74 , 510 , 29 ,
# 100 , 610 , 29 ,
# 296 , 768 , 29 ,
# 262 , 266 , 27 ,
# 106 , 514 , 22 ,
# 108 , 624 , 22 ,
# 1128 , 520 , 48 ,
# 918 , 260 , 47 ,
# 62 , 510 , 40 ,
# 1064 , 716 , 34 ,
# 294 , 268 , 22 ,
# 1126 , 586 , 49 ,
# 938 , 270 , 46 ,
# 1116 , 438 , 38 ,
# 78 , 556 , 35 ,
# 306 , 776 , 29 ,
# 108 , 410 , 19 ,
# 1052 , 754 , 47 ,
# 72 , 610 , 40 ,
# 62 , 468 , 39 ,
# 1116 , 626 , 36 ,
# 78 , 596 , 34 ,
# 1108 , 712 , 30 ,
# 78 , 442 , 22 ,
# 110 , 586 , 19 ,
# 96 , 432 , 16 ,
# 1090 , 592 , 12 ,
# 62 , 398 , 49 ,
# 80 , 684 , 49 ,
# 54 , 490 , 48 ,
# 1122 , 742 , 46 ,
# 1124 , 486 , 45 ,
# 64 , 440 , 37 ,
# 80 , 636 , 34 ,
# 84 , 612 , 29 ,
# 96 , 406 , 16 ,
# 316 , 774 , 47 ,
# 1062 , 672 , 40 ,
# 1116 , 596 , 38 ,
# 1116 , 548 , 37 ,
# 1112 , 660 , 35 ,
# 1068 , 540 , 34 ,
# 928 , 276 , 30 ,
# 1106 , 758 , 29 ,
# 110 , 576 , 19 ,
# 1098 , 476 , 18 ,
# 1090 , 426 , 12 ,
# 60 , 528 , 43 ,
# 1120 , 576 , 43 ,
# 74 , 424 , 28 ,
# 108 , 550 , 20 ,
# 98 , 458 , 15 ,
# 1090 , 446 , 12 ,
# 1116 , 616 , 36 ,
# 1068 , 576 , 35 ,
# 62 , 428 , 34 ,
# 1100 , 744 , 23 ,
# 284 , 252 , 22 ,
# 98 , 538 , 16 ,
# 90 , 480 , 11 ,
# 938 , 260 , 48 ,
# 1062 , 730 , 36 ,
# 1062 , 758 , 36 ,
# 1116 , 562 , 35 ,
# 80 , 622 , 33 ,
# 74 , 566 , 28 ,
# 78 , 478 , 22 ,
# 110 , 434 , 18 ,
# 90 , 506 , 12 ,
# 1090 , 436 , 12 ,
# 1090 , 638 , 12 ,
# 66 , 630 , 49 ,
# 1114 , 730 , 37 ,
# 66 , 556 , 32 ,
# 928 , 744 , 26 ,
# 274 , 286 , 21 ,
# 114 , 452 , 19 ,
# 1090 , 530 , 12 ,
# 1090 , 732 , 11 ,
# 102 , 592 , 11 ,
# 92 , 582 , 10 ,
# 1088 , 762 , 10 ,
# 1116 , 420 , 36 ,
# 144 , 400 , 34 ,
# 918 , 772 , 28 ,
# 306 , 756 , 28 ,
# 80 , 400 , 21 ,
# 110 , 610 , 19 ,
# 1094 , 494 , 16 ,
# 100 , 644 , 13 ,
# 1090 , 674 , 12 ,
# 118 , 388 , 10 ,
# 62 , 572 , 37 ,
# 138 , 598 , 27 ,
# 316 , 764 , 27 ,
# 76 , 410 , 22 ,
# 100 , 574 , 13 ,
# 1090 , 416 , 11 ,
# 1086 , 772 , 11 ,
# 92 , 394 , 11 ,
# 1088 , 722 , 11 ,
# 86 , 430 , 10 ,
# 1110 , 776 , 34 ,
# 134 , 398 , 24 ,
# 94 , 618 , 19 ,
# 290 , 754 , 19 ,
# 116 , 508 , 14 ,
# 1090 , 508 , 12 ,
# 1092 , 576 , 10 ,
# 68 , 388 , 35 ,
# 920 , 730 , 27 ,
# 288 , 280 , 21 ,
# 76 , 586 , 21 ,
# 916 , 720 , 21 ,
# 1098 , 552 , 18 ,
# 84 , 564 , 17 ,
# 934 , 760 , 17 ,
# 92 , 528 , 10 ,
# 68 , 652 , 45 ,
# 148 , 706 , 37 ,
# 140 , 556 , 28 ,
# 76 , 528 , 20 ,
# 100 , 656 , 14 ,
# 1090 , 604 , 11 ,
# 92 , 492 , 10 ,
# 120 , 570 , 10 ,
# 928 , 256 , 27 ,
# 1122 , 464 , 23 ,
# 296 , 258 , 16 ,
# 84 , 542 , 16 ,
# 272 , 242 , 15 ,
# 1088 , 520 , 15 ,
# 102 , 632 , 12 ,
# 916 , 270 , 27 ,
# 316 , 754 , 22 ,
# 108 , 374 , 17 ,
# 82 , 574 , 16 ,
# 80 , 488 , 14 ,
# 1088 , 662 , 11 ,
# 1106 , 586 , 11 ,
# 1088 , 688 , 10 ,
# 86 , 412 , 10 ,
# 120 , 398 , 10 ,
# 104 , 420 , 9 ,
# 90 , 444 , 8 ,
# 536 , 1016 , 7 ,
# 262 , 246 , 16 ,
# 116 , 474 , 15 ,
# 116 , 558 , 15 ,
# 122 , 416 , 12 ,
# 120 , 490 , 9 ,
# 120 , 530 , 9 ,
# 120 , 590 , 9 ,
# 1058 , 594 , 29 ,
# 1064 , 744 , 20 ,
# 1098 , 684 , 19 ,
# 130 , 564 , 18 ,
# 248 , 262 , 13 ,
# 122 , 546 , 12 ,
# 1096 , 542 , 12 ,
# 120 , 464 , 11 ,
# 120 , 724 , 8 ,
# 1060 , 648 , 26 ,
# 146 , 420 , 20 ,
# 1066 , 798 , 20 ,
# 1066 , 466 , 20 ,
# 1110 , 482 , 12 ,
# 92 , 598 , 10 ,
# 120 , 604 , 9 ,
# 120 , 658 , 9 ,
# 94 , 558 , 8 ,
# 1092 , 564 , 8 ,
# 94 , 518 , 7 ,
# 90 , 384 , 7 ,
# 1134 , 448 , 33 ,
# 94 , 714 , 20 ,
# 1060 , 604 , 20 ,
# 96 , 732 , 18 ,
# 1070 , 622 , 12 ,
# 118 , 426 , 10 ,
# 120 , 580 , 9 ,
# 120 , 618 , 9 ,
# 1110 , 448 , 8 ,
# 90 , 466 , 6 ,
# 1110 , 468 , 8 ,
# 122 , 768 , 5 ,
# 1070 , 500 , 15 ,
# 116 , 518 , 12 ,
# 84 , 646 , 12 ,
# 98 , 666 , 11 ,
# 882 , 750 , 11 ,
# 84 , 456 , 7 ,
# 92 , 638 , 6 ,
# 1084 , 784 , 6 ,
# 1118 , 648 , 20 ,
# 1116 , 530 , 16 ,
# 80 , 388 , 14 ,
# 1072 , 762 , 11 ,
# 1080 , 54 , 10 ,
# 1086 , 614 , 10 ,
# 244 , 274 , 7 ,
# 80 , 500 , 7 ,
# 90 , 628 , 7 ,
# 1116 , 494 , 16 ,
# 1066 , 484 , 16 ,
# 1066 , 512 , 16 ,
# 1108 , 688 , 9 ,
# 118 , 680 , 8 ,
# 122 , 636 , 8 ,
# 1076 , 648 , 8 ,
# 1076 , 458 , 8 ,
# 1110 , 540 , 8 ,
# 1086 , 464 , 7 ,
# 92 , 420 , 6 ,
# 94 , 548 , 6 ,
# 1084 , 484 , 5 ,
# 1084 , 550 , 5 ,
# 1072 , 662 , 11 ,
# 136 , 432 , 11 ,
# 118 , 442 , 8 ,
# 1086 , 648 , 8 ,
# 122 , 372 , 6 ,
# 898 , 334 , 3 ,
# 140 , 582 , 13 ,
# 1066 , 778 , 13 ,
# 1066 , 682 , 12 ,
# 1084 , 494 , 6 ,
# 1080 , 746 , 5 ,]

b = [
928.000000,712.000000,41.000000,
312.000000,238.000000,30.000000,
912.000000,238.000000,28.000000,
326.000000,740.000000,28.000000,
]
b = np.array(b)
# b = b
count = 0
cycle_message_0001 = []
mid = []
for i in b:
    count += 1
    mid.append(i)
    if count % 3 == 0:
        cycle_message_0001.append(mid)
        mid = []

cycle_message = np.array(cycle_message_0001)
cycle_message = np.array(cycle_message_0001)
cycle_message = np.array(cycle_message_0001)

# 将文件中的数据进行整合 -> 得到点加坐标的形式
with open("D://labeldate2//small_save//loc1//tag4//4.json", 'r') as f:
    all_message = []
    result = json.load(f)["shapes"]
    for i in range(len(result)):
        sum_r = 0
        count = 0
        if result[i]["label"] == "dian":
            points = result[i]["points"][0]
            points = result[i]["points"][0]
            all_message.append(points)
        if result[i]["label"] == "yuan":
            # print(result[i]["points"])
            for point in result[i]["points"]:
                all_message_np = np.array(all_message[i - len(all_message)])
                point_np = np.array(point)
                diff = np.sqrt(np.sum((all_message_np - point_np) ** 2))
                sum_r += diff
                count += 1
            all_message[i - len(all_message)].append(sum_r / count)
    # 然后进行遍历，找到原始数据中最靠近的点
    ad_c = []
    ad_r = []
    mse_r = []
    print('标注实际数据',len(all_message))
    print('算法检测出',len(cycle_message))
    count = 0
    corr_count = 0
    for predict_data in all_message:
        for real_data in cycle_message:
            # 那么代表这两个圆心应该是同一个圆的预测的结果
            if abs(real_data[0] - predict_data[0]) < 8 and abs(real_data[1] - predict_data[1]) < 8 and abs(real_data[2] - predict_data[2]< 8 ):
                error = np.sqrt((real_data[0] - predict_data[0]) ** 2 + (real_data[1] - predict_data[1]) ** 2)
                ad_c.append(error)
                # print(error)
                if(error > 3.4):
                    corr_count = corr_count+1
                ad_r.append(abs(real_data[2] - predict_data[2]))
                count = count + 1

    print('算法检测对', count)
    print(sum(ad_c) / len(cycle_message)+(len(cycle_message)-count)*1, end=" ")
    print(sum(ad_r) / len(cycle_message)+(len(cycle_message)-count)*1, end=" ")
    
    per = count / len(cycle_message) * 100
    recall = (len(all_message) - corr_count)/len(all_message) *100
    # f1 = 2*per*recall / (per + recall) *100
    # print("{}%".format(per),"{}%".format(recall),"{}%".format(f1))
    print("{}%".format(per),"{}%".format(recall))
    # print("{}%".format(recall))
    # print("{}%".format(f1))
